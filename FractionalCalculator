import java.util.*;

public class FractionalCalculator {
    public static void main(String[] args) {
    	Scanner console = new Scanner(System.in);
        run(console); // The calculator itself
    }
    public static void run(Scanner console) { // Lines 10 - 191 run the actual calculation
        System.out.println("Enter an input:");             
        String a = console.next(); // Number
        String b = console.next(); // Operator
        String c = console.next(); // Number
        a = parse(a, console); // Checking for errors
        b = operator(b, console);
        c = parse(c, console);
        String errors = ""; // For swapping values of "a" and "c" if necessary
        int minusone = 0;
        if (c.charAt(0) == '-' && b.equals("+")) { // "c" should not contain '-'
            c = c.substring(1);
            b = "-";
        } else if (c.charAt(0) == '-' && b.equals("-")) { // No double negatives!
            c = c.substring(1);
            b = "+";
        } else if ((b.equals("*") || b.equals("/")) && c.charAt(0) == '-' && a.charAt(0) == '-') { // No double negatives here either!
            c = c.substring(1);
            a = a.substring(1);
        } else if ((b.equals("*") || b.equals("/")) && c.charAt(0) == '-') { // The easy way to deal with negative values
            minusone = 1;
            c = c.substring(1);
        } else if ((b.equals("*") || b.equals("/")) && a.charAt(0) == '-') { // See above
            minusone = 1;
            a = a.substring(1);
        }
        if (a.charAt(0) == '-' && b.equals("+")) { // "a" should not contain '-'
            errors = a.substring(1);
            a = c;
            c = errors;
            b = "-";
        } else if (a.charAt(0) == '-' && b.equals("-")) { // See above
            a = a.substring(1);
            b = "+";
            minusone = 1;
        }
        /* Lines 46 - 72 separates "c" into integer tokens and '_' or '/' tokens. If
        "c" only contains integer tokens, then the following code does not apply. */
        int d = 1;
        while (d < c.length() && c.charAt(d) != '_' && c.charAt(d) != '/') {
            d++;
        }
        String e = c.substring(0, d);
        String f = "";
        int escape = 0; // the value of "escape" determines the integer value of "c"
        if (d < c.length()) {
            f = c.substring(d + 1);
            if (c.charAt(d) != '_') { // For mixed fractions
                escape++;
            }
        } else {
            f = e;
            escape += 2;
        }
        int h = 1; // If "c" is not a mixed fraction, lines 62 - 72 do not apply
        while (h < f.length() && f.charAt(h) != '/') {
            h++;
        }
        String i = f.substring(0, h);
        String j = "";
        if (h < f.length()) {
            j = f.substring(h + 1);
        } else {
            j = i;
        }
        /* Lines 75 - 101 separates "a" into integer tokens and '_' or '/' tokens. If
        "a" only contains integer tokens, then the following code does not apply. */
        int l = 1;
        while (l < a.length() && a.charAt(l) != '_' && a.charAt(l) != '/') {
            l++;
        }
        String m = a.substring(0, l);
        String n = "";
        int exterminate = 0; // the value of "exterminate" determines the integer value of "a"
        if (l < a.length()) {
            n = a.substring(l + 1);
            if (a.charAt(l) != '_') { // For mixed fractions
                exterminate++;
            } 
        } else {
            n = m;
            exterminate += 2;
        }
        int p = 1; // If "a" is not a mixed fraction, lines 91 - 101 do not apply
        while (p < n.length() && n.charAt(p) != '/') {
            p++;
        }
        String q = n.substring(0, p);
        String r = "";
        if (p < n.length()) {
            r = n.substring(p + 1);
        } else {
            r = q;
        }
        int t = 0, w = 0; // Integer variables
        int u = 0, x = 0;
        int v = 0, y = 0;
        if (exterminate == 1) { // Lines 105 - 129 store "a" as integers
            u = createInts(m); // Improper fractions
            v = createInts(n);
            if (u % v == 0) {
                v = u / v; // In case the fraction can be reduced
                u = 0;
            } else if (u / v > 0) {
                t += u / v;
                u -= ((u / v) * v);
            }
        } else if (exterminate == 2) { // Integers
            v = createInts(a);
        } else { // Mixed fractions
            t = createInts(m);
            u = createInts(q);
            v = createInts(r);
            if (u % v == 0) {
                v = t + (u / v); // In case the fraction is an integer
                t = 0;
                u = 0;
            } else if (u / v >= 1) {
                t = t + (u / v); // In case the fraction can be reduced
                u = u - v * (u / v);
            }
        }
        if (escape == 1) { // Lines 130 - 154 store "c" as integers
            x = createInts(e); // Improper fractions
            y = createInts(f);
            if (x % y == 0) {
                y = x / y; // In case the fraction can be reduced
                x = 0;
            } else if (x / y > 0) {
                w += x / y;
                x -= ((x / y) * y);
            }
        } else if (escape == 2) { // Integers
            y = createInts(c);
        } else { // Mixed fractions
            w = createInts(e);
            x = createInts(i);
            y = createInts(j);
            if (x % y == 0) {
                y = w + (x / y); // In case the fraction is an integer
                w = 0;
                x = 0;
            } else if (x / y >= 1) {
                w = w + (x / y); // In case the fraction can be reduced
                x = x - y * (x / y);
            }
        }
        u += t * v; // Storing "a" as a mixed fraction
        if (t == 0 && u == 0) {
            u = v;
            v = 1;
        }
        t = 0;
        x += w * y; // Storing "c" as a mixed fraction
        if (w == 0 && x == 0) {
            x = y;
            y = 1;
        }
        w = 0;
        if (b.equals("+")) { // Addition
            addition(t, u, v, w, x, y, minusone);
        } else if (b.equals("-")) { // Subtraction
            subtraction(t, u, v, w, x, y);
        } else if (b.equals("*")) { // Multiplication
            multiplication(t, u, v, w, x, y, minusone);
        } else { // Division
            division(t, u, v, w, x, y, minusone);
        }
        quit(console); // Reset feature
    }
    public static String parse(String a, Scanner console) { // Illegal arguments in strings "a" and "c"
        for (int b = 0; b < a.length(); b++) {
            if (a.charAt(b) != '1' && a.charAt(b) != '2' && a.charAt(b) != '3' && a.charAt(b) != '4' && a.charAt(b) != '5' &&
                a.charAt(b) != '6' && a.charAt(b) != '7' && a.charAt(b) != '8' && a.charAt(b) != '9' && a.charAt(b) != '0' &&
                a.charAt(b) != '/' && a.charAt(b) != '_' && a.charAt(b) != '-') {
                System.out.println("Invalid Input. Try Again:");
                run(console); // Second chance
            }
        }
        return a;
    }
    public static String operator(String b, Scanner console) { // Illegal argument in string "b"
        if (!b.equals("+") && !b.equals("-") && !b.equals("*") && !b.equals("/")) {
            System.out.println("Invalid Input. Try Again:");
            run(console); // Second chance
        }
        return b;
    }
    public static int createInts(String a) { // Lines 196 - 205 convert strings to integers
        int b = a.length() - 1;
        int c = 0;
        int d = 0;
        for (int e = b; e >= 0; e--) { // Determines the integer value of each digit
            d = a.charAt(e) - 48; // ASCII code for 0 is 48
            c += d * (int) Math.pow(10, (b - e));
        }
        return c; // The final integer value
    }
    public static void addition(int t, int u, int v, int w, int x, int y, int minusone) { // Addition: lines 206 - 219
        if (minusone == 1) { // If "a" is negative
            System.out.print("-");
        }
        if (((u * y) + (x * v)) % (v * y) == 0) { // Integers
            System.out.println(((u * y) + (x * v)) / (v * y));
        } else if (((u * y) + (x * v)) / (v * y) > 0) { // Mixed fractions
            t += ((u * y) + (x * v)) / (v * y);
            u = ((u * y) + (x * v)) % (v * y);
            System.out.println(t + "_" + u + "/" + (v * y));
        } else { // Fractions
            System.out.println(((u * y) + (x * v)) + "/" + (v * y));
        }        
    }
    public static void subtraction(int t, int u, int v, int w, int x, int y) { // Subtraction: lines 220 - 230
        if (((u * y) - (x * v)) % (v * y) == 0) { // Integers
            System.out.println(((u * y) - (x * v)) / (v * y));
        } else if (Math.abs(((u * y) - (x * v)) / (v * y)) > 0) { // Mixed fractions
            t += ((u * y) - (x * v)) / (v * y);
            u = Math.abs(((u * y) - (x * v)) % (v * y));
            System.out.println(t + "_" + u + "/" + (v * y));
        } else { // Fractions
            System.out.println(((u * y) + (x * v)) + "/" + (v * y));
        }
    }
    public static void multiplication(int t, int u, int v, int w, int x, int y, int minusone) { // Multiplication: lines 231 - 246   
        if (minusone == 1) { // If "a" is negative
            System.out.print("-");
        }
        if (u * x == 0) { // For values of 0
            System.out.println(0);
        } else if ((u * x) % (v * y) == 0) { // Integers
            System.out.println((u * x) / (v * y));
        } else if ((u * x) / (v * y) > 0) { // Mixed fractions
            t += (u * x) / (v * y);
            u = (u * x) % (v * y);
            System.out.println(t + "_" + u + "/" + (v * y));
        } else { // Fractions
            System.out.println((u * x) + "/" + (v * y));
        }
    }
    public static void division(int t, int u, int v, int w, int x, int y, int minusone) { // Division: lines 247 - 252
        int z = x; // Division is just multiplication, except you use the reciprocal of the denominator
        x = y;
        y = z;
        multiplication(t, u, v, w, x, y, minusone);
    }
    public static void quit(Scanner console) { // Lines 253 - 261 run the calculator again	   
        System.out.print("Run Again? "); // Recursion!
        String quit = console.next();
        if (!quit.equalsIgnoreCase("yes")) {
            System.out.println("Goodbye!"); // Farewell and Amen
        } else {
            run(console);
        }
    }
}
